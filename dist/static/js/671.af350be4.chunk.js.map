{"version":3,"file":"static/js/671.af350be4.chunk.js","mappings":"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","sources":["constants/apiRoutes.js","pages/Login.js","services/AuthService.js"],"sourcesContent":["export const API_BASE_URL = '/api';\n\nexport const AUTH = {\n  LOGIN: `${API_BASE_URL}/auth/login`,\n  REGISTER: `${API_BASE_URL}/auth/register`,\n  FORGOT_PASSWORD: `${API_BASE_URL}/auth/forgot-password`,\n  RESET_PASSWORD: `${API_BASE_URL}/auth/reset-password`,\n  UPDATE_PROFILE: `${API_BASE_URL}/auth/update-profile`,\n};\n\nexport const USER = {\n  VALIDATE_USER: `${API_BASE_URL}/auth/user`,\n  GET_PROFILE: `${API_BASE_URL}/user/profile`,\n  UPDATE_PROFILE: `${API_BASE_URL}/user/update-profile`,\n};\n\nexport const POSTS = {\n  GET_ALL: `${API_BASE_URL}/posts`,\n  CREATE: `${API_BASE_URL}/posts/create`,\n  UPDATE: `${API_BASE_URL}/posts/update`,\n  DELETE: `${API_BASE_URL}/posts/delete`,\n};","// Importing the CSS file for styling the Login component\nimport \"../css/Login.css\";\n\n// Importing necessary modules from React and other libraries\nimport React, { useState } from 'react';\nimport { makeLoginRequest } from \"../services/AuthService\";\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { loginSuccess, loginStart } from '../store/slices/auth';\n\n// Defining the Login component\nconst Login = () => {\n  // Defining state variables for email, password, errors, message, and error\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errors, setErrors] = useState({});\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n  const dispatch = useDispatch();\n\n  // Using the useNavigate hook to programmatically navigate to different routes\n  const navigate = useNavigate();\n\n  // Function to validate the form inputs\n  const validateForm = () => {\n    const newErrors = {};\n\n    // Checking if email is provided and valid\n    if (!email) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(email)) {\n      newErrors.email = 'Invalid email address';\n    }\n\n    // Checking if password is provided\n    if (!password) {\n      newErrors.password = 'Password is required';\n    }\n\n    // Setting the errors state with the new errors\n    setErrors(newErrors);\n\n    // Returning true if there are no errors, false otherwise\n    return Object.keys(newErrors).length === 0;\n  };\n\n  // Function to handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault(); // Preventing the default form submission behavior\n\n    // Validating the form and stopping if validation fails\n    if (!validateForm()) return;\n    dispatch(loginStart());\n    try {\n      // Sending a POST request to the login API with email and password\n      const response = await makeLoginRequest(email, password);\n\n      // Setting the success message and clearing any error messages\n      setMessage(response.data.message);\n      setError('');\n      // Dispatching the login action to update the Redux store\n      dispatch(loginSuccess(response.data.user));\n      // Saving the received token to localStorage\n      localStorage.setItem('token', response.data.token);\n\n      // Navigating to the dashboard after successful login\n      navigate('/dashboard');\n    } catch (err) {\n      // Setting the error message if the request fails\n      setError(err.response?.data?.message || 'Something went wrong');\n    }\n  };\n\n  // Returning the JSX to render the Login component\n  return (\n    <div className=\"login-container\">\n      <h2>Login</h2>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email</label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            placeholder=\"Enter your email\"\n          />\n          {errors.email && <div className=\"error\">{errors.email}</div>}\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            placeholder=\"Enter your password\"\n          />\n          {errors.password && <div className=\"error\">{errors.password}</div>}\n        </div>\n        {message && <div className=\"success-message\">{message}</div>}\n        {error && <div className=\"error-message\">{error}</div>}\n        <button type=\"submit\">Login</button>\n      </form>\n      <div className=\"text-center mt-3\">\n        Don't have an account? <a href=\"/registration\">Register here</a>\n      </div>\n      <div className=\"text-center mt-3\">\n        Forgot your password? <a href=\"/forgot-password\">Reset it here</a>\n      </div>\n    </div>\n  );\n};\n\n// Exporting the Login component as the default export\nexport default Login;","import axios from 'axios';\nimport { AUTH, USER } from '../constants/apiRoutes';\n\nasync function makeForgotPasswordRequest(email) {\n    return axios.post(AUTH.FORGOT_PASSWORD, { email });\n}\n\nasync function makeLoginRequest(email, password) {\n    return axios.post(AUTH.LOGIN, { email, password });\n}\n\nasync function makeRegisterRequest(formData) {\n    return axios.post(AUTH.REGISTER, formData);\n}\n\nasync function makeResetPasswordRequest(token, password) {\n    return axios.post(AUTH.RESET_PASSWORD, {\n        token, // Include the reset token\n        password, // Include the new password\n      });\n}\n\nasync function validateUserToken(token) {\n    return axios.get(USER.VALIDATE_USER, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n}\n\nexport { makeForgotPasswordRequest, makeLoginRequest, makeRegisterRequest, makeResetPasswordRequest, validateUserToken };"],"names":["API_BASE_URL","AUTH","LOGIN","concat","REGISTER","FORGOT_PASSWORD","RESET_PASSWORD","UPDATE_PROFILE","USER","VALIDATE_USER","GET_PROFILE","Login","email","setEmail","useState","password","setPassword","errors","setErrors","message","setMessage","error","setError","dispatch","useDispatch","navigate","useNavigate","_jsxs","className","children","_jsx","onSubmit","async","e","preventDefault","validateForm","newErrors","test","Object","keys","length","loginStart","response","makeLoginRequest","data","loginSuccess","user","localStorage","setItem","token","err","_err$response","_err$response$data","htmlFor","type","name","value","onChange","target","placeholder","href","makeForgotPasswordRequest","axios","post","makeRegisterRequest","formData","makeResetPasswordRequest","validateUserToken","get","headers","Authorization"],"sourceRoot":""}